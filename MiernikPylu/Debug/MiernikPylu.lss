
MiernikPylu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800064  00800064  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ef  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000682  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032f  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  8a:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_Start>:
uint8_t isButtonOn = 1;
uint8_t udrState = 0;

// Do i2c
void TWI_Start(){
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <TWI_Start+0x4>
}
  9c:	08 95       	ret

0000009e <TWI_Stop>:

void TWI_Stop(){
TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  9e:	84 e9       	ldi	r24, 0x94	; 148
  a0:	86 bf       	out	0x36, r24	; 54
while(TWCR&(1<<TWSTO));
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	04 fc       	sbrc	r0, 4
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <TWI_Stop+0x4>
}
  a8:	08 95       	ret

000000aa <TWI_Write>:

void TWI_Write(uint8_t data){
TWDR = data;
  aa:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT)|(1<<TWEN);
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <TWI_Write+0x6>
}
  b6:	08 95       	ret

000000b8 <TWI_init>:

void TWI_init(){
TWBR = 92;
  b8:	8c e5       	ldi	r24, 0x5C	; 92
  ba:	80 b9       	out	0x00, r24	; 0
TWCR = (1<<TWEA);
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	86 bf       	out	0x36, r24	; 54
  c0:	08 95       	ret

000000c2 <LCD_write>:
}


void LCD_write(uint8_t dane,uint8_t rs){
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	d8 2f       	mov	r29, r24
  ca:	c6 2f       	mov	r28, r22
	uint8_t co;
	TWI_Start();
  cc:	0e 94 49 00 	call	0x92	; 0x92 <TWI_Start>
	TWI_Write(0x4e);
  d0:	8e e4       	ldi	r24, 0x4E	; 78
  d2:	0e 94 55 00 	call	0xaa	; 0xaa <TWI_Write>
	co = 0;
	co |= (rs<<RS)|(1<<AK)|(1<<E)|(dane& 0xf0);
  d6:	1d 2f       	mov	r17, r29
  d8:	10 7f       	andi	r17, 0xF0	; 240
  da:	1c 2b       	or	r17, r28
	TWI_Write(co);
  dc:	81 2f       	mov	r24, r17
  de:	8c 60       	ori	r24, 0x0C	; 12
  e0:	0e 94 55 00 	call	0xaa	; 0xaa <TWI_Write>
	co&= ~(1<<E);
  e4:	81 2f       	mov	r24, r17
  e6:	8b 7f       	andi	r24, 0xFB	; 251
	TWI_Write(co);
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	0e 94 55 00 	call	0xaa	; 0xaa <TWI_Write>

	co = 0;
	co |= (rs<<RS)|(1<<AK)|(1<<E)|( (dane<<4) & 0xf0);
  ee:	20 e1       	ldi	r18, 0x10	; 16
  f0:	d2 9f       	mul	r29, r18
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	c8 2b       	or	r28, r24
	TWI_Write(co);
  f8:	8c 2f       	mov	r24, r28
  fa:	8c 60       	ori	r24, 0x0C	; 12
  fc:	0e 94 55 00 	call	0xaa	; 0xaa <TWI_Write>
	co&= ~(1<<E);
 100:	8c 2f       	mov	r24, r28
 102:	8b 7f       	andi	r24, 0xFB	; 251
	TWI_Write(co);
 104:	88 60       	ori	r24, 0x08	; 8
 106:	0e 94 55 00 	call	0xaa	; 0xaa <TWI_Write>
	TWI_Stop();
 10a:	0e 94 4f 00 	call	0x9e	; 0x9e <TWI_Stop>
	}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <LCD_init>:

	LCD_init(){
	LCD_write(0x33,0);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	83 e3       	ldi	r24, 0x33	; 51
 11a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	LCD_write(0x32,0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	82 e3       	ldi	r24, 0x32	; 50
 122:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	LCD_write(0x28,0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	LCD_write(0x06,0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	LCD_write(0x0f,0);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	LCD_write(0x01,0);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9f e1       	ldi	r25, 0x1F	; 31
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_init+0x34>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_init+0x3a>
 150:	00 00       	nop
	_delay_ms(2);
}
 152:	08 95       	ret

00000154 <LCD_text>:

void LCD_text(char *tab){
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	static uint8_t i =0;
	while(*tab){
 15a:	1a c0       	rjmp	.+52     	; 0x190 <LCD_text+0x3c>
	LCD_write(*tab++,1);
 15c:	21 96       	adiw	r28, 0x01	; 1
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	if(i++==15){
 164:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <i.1758>
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	98 0f       	add	r25, r24
 16c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <i.1758>
 170:	8f 30       	cpi	r24, 0x0F	; 15
 172:	21 f4       	brne	.+8      	; 0x17c <LCD_text+0x28>
	LCD_write(0xc0,0);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	80 ec       	ldi	r24, 0xC0	; 192
 178:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	}
	if(i==32)
 17c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <i.1758>
 180:	80 32       	cpi	r24, 0x20	; 32
 182:	31 f4       	brne	.+12     	; 0x190 <LCD_text+0x3c>
	{
	LCD_write(0x80,0);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	i=0;
 18c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <i.1758>
	_delay_ms(2);
}

void LCD_text(char *tab){
	static uint8_t i =0;
	while(*tab){
 190:	88 81       	ld	r24, Y
 192:	81 11       	cpse	r24, r1
 194:	e3 cf       	rjmp	.-58     	; 0x15c <LCD_text+0x8>
	LCD_write(0x80,0);
	i=0;
	}

	}
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <__vector_11>:
ISR(TIMER0_OVF_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	8f 93       	push	r24
	if (!(PINB & ((1<<przycisk)))){
 1a8:	b0 99       	sbic	0x16, 0	; 22
 1aa:	0f c0       	rjmp	.+30     	; 0x1ca <__vector_11+0x2e>
		switch(klawisz){
 1ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <klawisz>
 1b0:	88 23       	and	r24, r24
 1b2:	19 f0       	breq	.+6      	; 0x1ba <__vector_11+0x1e>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <__vector_11+0x26>
 1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <__vector_11+0x48>
			case 0:
			klawisz =1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <klawisz>
			break;
 1c0:	11 c0       	rjmp	.+34     	; 0x1e4 <__vector_11+0x48>
			case 1:
			klawisz =2;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <klawisz>
			break;	
 1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <__vector_11+0x48>
		}
	}
		else{
			switch(klawisz){
 1ca:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <klawisz>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <__vector_11+0x3c>
 1d2:	84 30       	cpi	r24, 0x04	; 4
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <__vector_11+0x44>
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <__vector_11+0x48>
				case 3:
				klawisz =4;
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <klawisz>
				break;
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_11+0x48>
				case 4:
				klawisz =0;
 1e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <klawisz>
				break;
			}
		}
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_13>:

ISR(USART_RXC_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	//LCD_text(UDR);
	// Zamienic na global scope, zeby obslugiwac wyslanie tego w while, a nie w przerwaniu
	static uint16_t recChecksum=0, checksum = 0,pm2,pm10;
	//int x=UDR;
	//if((x & 0xff)==0x42){	
	checksum+=UDR;
 212:	2c b1       	in	r18, 0x0c	; 12
 214:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <checksum.1779>
 218:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <checksum.1779+0x1>
 21c:	82 0f       	add	r24, r18
 21e:	91 1d       	adc	r25, r1
 220:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <checksum.1779+0x1>
 224:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <checksum.1779>
	if(UDR  == 0x42)
 228:	8c b1       	in	r24, 0x0c	; 12
 22a:	82 34       	cpi	r24, 0x42	; 66
 22c:	19 f4       	brne	.+6      	; 0x234 <__vector_13+0x44>
	{
		udrState=1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <udrState>
		//LCD_text("text ");	
	}
	if(UDR==0x4d && udrState==1){
 234:	8c b1       	in	r24, 0x0c	; 12
 236:	8d 34       	cpi	r24, 0x4D	; 77
 238:	39 f4       	brne	.+14     	; 0x248 <__vector_13+0x58>
 23a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <udrState>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	19 f4       	brne	.+6      	; 0x248 <__vector_13+0x58>
		udrState=2;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <udrState>
	}
	if(udrState>=2){
 248:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <udrState>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	08 f4       	brcc	.+2      	; 0x252 <__vector_13+0x62>
 250:	60 c0       	rjmp	.+192    	; 0x312 <__vector_13+0x122>
		//LCD_text("text ");
		if(udrState==6 || udrState==7){
 252:	9a ef       	ldi	r25, 0xFA	; 250
 254:	98 0f       	add	r25, r24
 256:	92 30       	cpi	r25, 0x02	; 2
 258:	58 f4       	brcc	.+22     	; 0x270 <__vector_13+0x80>
			pm2 += UDR;
 25a:	9c b1       	in	r25, 0x0c	; 12
 25c:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <pm2.1780>
 260:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <pm2.1780+0x1>
 264:	29 0f       	add	r18, r25
 266:	31 1d       	adc	r19, r1
 268:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <pm2.1780+0x1>
 26c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <pm2.1780>
		}
		if(udrState==8 || udrState==9){
 270:	98 ef       	ldi	r25, 0xF8	; 248
 272:	98 0f       	add	r25, r24
 274:	92 30       	cpi	r25, 0x02	; 2
 276:	58 f4       	brcc	.+22     	; 0x28e <__vector_13+0x9e>
			pm10 +=UDR;
 278:	9c b1       	in	r25, 0x0c	; 12
 27a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <pm10.1781>
 27e:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <pm10.1781+0x1>
 282:	29 0f       	add	r18, r25
 284:	31 1d       	adc	r19, r1
 286:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <pm10.1781+0x1>
 28a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <pm10.1781>
		}
		if(udrState ==30 ){
 28e:	8e 31       	cpi	r24, 0x1E	; 30
 290:	71 f4       	brne	.+28     	; 0x2ae <__vector_13+0xbe>
			recChecksum += UDR<<8;
 292:	2c b1       	in	r18, 0x0c	; 12
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	32 2f       	mov	r19, r18
 298:	22 27       	eor	r18, r18
 29a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__data_end>
 29e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__data_end+0x1>
 2a2:	24 0f       	add	r18, r20
 2a4:	35 1f       	adc	r19, r21
 2a6:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <__data_end+0x1>
 2aa:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_end>
		}
		if(udrState==31){
 2ae:	8f 31       	cpi	r24, 0x1F	; 31
 2b0:	59 f4       	brne	.+22     	; 0x2c8 <__vector_13+0xd8>
			recChecksum +=UDR;
 2b2:	9c b1       	in	r25, 0x0c	; 12
 2b4:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__data_end>
 2b8:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__data_end+0x1>
 2bc:	29 0f       	add	r18, r25
 2be:	31 1d       	adc	r19, r1
 2c0:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <__data_end+0x1>
 2c4:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_end>
		}
		if(udrState==31 )
 2c8:	8f 31       	cpi	r24, 0x1F	; 31
 2ca:	f1 f4       	brne	.+60     	; 0x308 <__vector_13+0x118>
		{
			LCD_write(recChecksum<<8,1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
			LCD_write(recChecksum&0xff,1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 2da:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
			LCD_text(" ");
 2de:	81 e6       	ldi	r24, 0x61	; 97
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_text>
			LCD_write(checksum<<8,1);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
			LCD_write(checksum&0xff,1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <checksum.1779>
 2f4:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
			recChecksum=0;
 2f8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 2fc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
			checksum=0;
 300:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <checksum.1779+0x1>
 304:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <checksum.1779>
		}
		udrState++;
 308:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <udrState>
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <udrState>
		//LCD_write(udrState+48,1);
	}
	//LCD_text(" ");

}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <USART_init>:

void USART_init(uint16_t ubrr){
	//UCSRB = (1<<TXEN); // wlaczenie nadajnika
	UCSRB = (1<<RXEN)|(1<<RXCIE);
 334:	20 e9       	ldi	r18, 0x90	; 144
 336:	2a b9       	out	0x0a, r18	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // Ustawienie wielkosci pamieci (?)
 338:	26 e8       	ldi	r18, 0x86	; 134
 33a:	20 bd       	out	0x20, r18	; 32
	UBRRH = (uint8_t)(ubrr>>8); // zapisanie polowy 16 bitowej zmiennej na 8 bitowy rejestr
 33c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)ubrr;
 33e:	89 b9       	out	0x09, r24	; 9
 340:	08 95       	ret

00000342 <main>:


int main(void)
{
/* Replace with your application code */
	USART_init(my_ubrr);
 342:	87 e6       	ldi	r24, 0x67	; 103
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 9a 01 	call	0x334	; 0x334 <USART_init>
		
	PRZYCISK |= (1<<przycisk); //przycisk na porcie 0
 34a:	88 b3       	in	r24, 0x18	; 24
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	88 bb       	out	0x18, r24	; 24
	TCCR0 = (1<<CS02)|(1<<CS00); // preskaler 1024
 350:	85 e0       	ldi	r24, 0x05	; 5
 352:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // WLACZENIE PRZERWANIA OVF T0
 354:	89 b7       	in	r24, 0x39	; 57
 356:	81 60       	ori	r24, 0x01	; 1
 358:	89 bf       	out	0x39, r24	; 57
	sei();
 35a:	78 94       	sei
	TWI_init();
 35c:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWI_init>
	LCD_init();
 360:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_init>
	LCD_write(0x80,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write>
	//LCD_text("Teleinformatykaawwww");
	DIODA_DDR = 0xff;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	8a bb       	out	0x1a, r24	; 26
	DIODA |= (1<<7)|(1<<6);
 370:	8b b3       	in	r24, 0x1b	; 27
 372:	80 6c       	ori	r24, 0xC0	; 192
 374:	8b bb       	out	0x1b, r24	; 27
	while (1)
	{
		if(klawisz==2){
 376:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <klawisz>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x34>
			/* Do zamiany na zmiane trybu zamiast przelaczanie diody*/
			if(isButtonOn++==0) DIODA |= (1<<7);
 37e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	98 0f       	add	r25, r24
 386:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 38a:	81 11       	cpse	r24, r1
 38c:	04 c0       	rjmp	.+8      	; 0x396 <main+0x54>
 38e:	8b b3       	in	r24, 0x1b	; 27
 390:	80 68       	ori	r24, 0x80	; 128
 392:	8b bb       	out	0x1b, r24	; 27
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <main+0x5e>
			else {
				DIODA &= ~(1<<7);
 396:	8b b3       	in	r24, 0x1b	; 27
 398:	8f 77       	andi	r24, 0x7F	; 127
 39a:	8b bb       	out	0x1b, r24	; 27
				isButtonOn=0;
 39c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			/**/
			klawisz=3;
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <klawisz>
 3a6:	e7 cf       	rjmp	.-50     	; 0x376 <main+0x34>

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
